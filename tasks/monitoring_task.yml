apiVersion: influxdata.com/v2alpha1
kind: Task
metadata:
    name: task-monitoring-task
spec:
    every: 1m
    name: 00. Task Monitoring Task
    query: |-
        import "strings"
        import "regexp"
        import "influxdata/influxdb/monitor"
        import "influxdata/influxdb/v1"

        task_data = from(bucket: "_tasks")
            |> range(start: -1m, stop: now())
            |> filter(fn: (r) => r["_measurement"] == "runs")
            |> filter(fn: (r) => r["_field"] == "logs")
            |> map(fn: (r) => ({ r with name: regexp.findString(r: /name: .+?".+?"/, v: r._value) }))
            |> map(fn: (r) => ({ r with every: regexp.findString(r: /every: ([0-9]+[smhd])+/, v: r._value) }))
            |> map(fn: (r) => ({ r with every: if r.every != "" then strings.split(v: r.every , t: " ")[1] else "" }))
            |> filter(fn: (r) => r.name != "")
            |> map(fn: (r) => ({ r with name: if r.name != "" then regexp.replaceAllString(r: /name: |\\\\\\"/, v: r.name, t: "") else "" }))
            |> drop(columns: ["_value","_start","_stop"])
            |> group(columns: ["name","taskID","status","_measurement"])
            |> map(fn: (r) => ({ r with _value: if r.status == "failed" then 1 else 0 }))
            |> last()

        check = {
            _check_id: "00000000deadbeef",
            _check_name: "00. Downsample Monitoring Task",
            _type: "threshold",
            tags: {},
        }

        ok = (r) =>
            (r["logs"] == 0)

        crit = (r) =>
            (r["logs"] == 1)

        messageFn = (r) =>
            ("The downsampling task: ${r.taskID} - ${r.name} has a status of ${r.status}")

        task_data
            |> v1["fieldsAsCols"]()
            |> monitor["check"](
                data: check,
                messageFn: messageFn,
                ok: ok,
                crit: crit,
            )